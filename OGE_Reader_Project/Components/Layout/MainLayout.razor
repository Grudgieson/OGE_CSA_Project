@inherits LayoutComponentBase

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>

    <MudAppBar Elevation="1">
        <MudImage Src="oge_logo.png" Width="102" Alt="Oklahoma Gas and Electric Logo"></MudImage>
        <MudSpacer />

        <MudButton Class="mr-4" Href="/" Variant.Text>Dashboard</MudButton>

        <!--
        
        <MudButton Class="mr-4" Href="counter" Variant.Text>Counter</MudButton>
        

        <MudFileUpload T="IBrowserFile" FilesChanged="FileUploaded">
            <ActivatorContent>
                <MudButton Class="mr-4" Variant="Variant.Filled"
                        Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.CloudUpload">
                    Upload
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>

        -->

        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
    </MudAppBar>

    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    <!-- #region -->

    // Code that processes file uploads
    public static string FileName { get; set; } = "";
    public string ErrorMessage { get; set; } = "";

    public async Task FileUploaded(IBrowserFile e)
    {
        var browserFile = e;
        FileName = browserFile.Name;

        if (browserFile != null)
        {

            try
            {
                
                // Saving Uploaded file to disk
                var fileStream = browserFile.OpenReadStream(long.MaxValue);
                var destinationStream = new FileStream(FileName, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);
                destinationStream.Close();

                // Close the file stream of the uploaded file
                fileStream.Close();

 

                this.StateHasChanged();

            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }
    }

}